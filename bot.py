import requests
import re
import telebot, time

TOKEN = "1116644032:AAFdzJyo1jztwHgAlI5GsJRvDU34SdNEKwY"
bot = telebot.TeleBot(TOKEN)






"""
СОЗДАЕТ ССЫЛКУ ИЗ СЛОВА, КОТОРОЕ ВВЕЛ ПОЛЬЗОВАТЕЛЬ
"""
def create_pseudo_url(word):
  # берем основную часть ссылки, первую букву слова (должна быть заглавной) и добавляем само слово с прописной буквы
  pseudo_url = "https://synonymonline.ru/" + word[0].upper() + "/" + word.lower()
  return pseudo_url






"""
ДЕКОДЕР ИЗ КИРИЛЛИЦЫ В УРЛ КОД
(КОТОРЫЙ ИНОГДА НУЖЕН А ИНОГДА САЙТ И БЕЗ НЕГО ИЩЕТ.....
Я НЕ ПОНИМАЮ НУЖЕН ЛИ ОН НА САМОМ ДЕЛЕ
ТК У МЕНЯ СНАЧАЛА С КИРИЛЛИЦЕЙ НЕ ПОЛУЧАЛОСЬ ИСПОЛЬЗОВАТЬ ССЫЛКИ
А ПОТОМ ВДРУГ ЗАРАБОТАЛО)
"""
def utf_decode(pseudo_url):
  # словарь с кодами и буками
  DICT_UTF = {
      "А": "%D0%90",
      "Б": "%D0%91",
      "В": "%D0%92",
      "Г": "%D0%93",
      "Д": "%D0%94",
      "Е": "%D0%95",
      "Ё": "%D0%81",
      "Ж": "%D0%96",
      "З": "%D0%97",
      "И": "%D0%98",
      "Й": "%D0%99",
      "К": "%D0%9A",
      "Л": "%D0%9B",
      "М": "%D0%9C",
      "Н": "%D0%9D",
      "О": "%D0%9E",
      "П": "%D0%9F",
      "Р": "%D0%A0",
      "С": "%D0%A1",
      "Т": "%D0%A2",
      "У": "%D0%A3",
      "Ф": "%D0%A4",
      "Х": "%D0%A5",
      "Ц": "%D0%A6",
      "Ч": "%D0%A7",
      "Ш": "%D0%A8",
      "Щ": "%D0%A9",
      "Ъ": "%D0%AA",
      "Ы": "%D0%AB",
      "Ь": "%D0%AC",
      "Э": "%D0%AD",
      "Ю": "%D0%AE",
      "Я": "%D0%AF",

      "а": "%D0%B0",
      "б": "%D0%B1",
      "в": "%D0%B2",
      "г": "%D0%B3",
      "д": "%D0%B4",
      "е": "%D0%B5",
      "ё": "%D1%91",
      "ж": "%D0%B6",
      "з": "%D0%B7",
      "и": "%D0%B8",
      "й": "%D0%B9",
      "к": "%D0%BA",
      "л": "%D0%BB",
      "м": "%D0%BC",
      "н": "%D0%BD",
      "о": "%D0%BE",
      "п": "%D0%BF",
      "р": "%D1%80",
      "с": "%D1%81",
      "т": "%D1%82",
      "у": "%D1%83",
      "ф": "%D1%84",
      "х": "%D1%85",
      "ц": "%D1%86",
      "ч": "%D1%87",
      "ш": "%D1%88",
      "щ": "%D1%89",
      "ъ": "%D1%8A",
      "ы": "%D1%8B",
      "ь": "%D1%8C",
      "э": "%D1%8D",
      "ю": "%D1%8E",
      "я": "%D1%8F"
  }

  # заменяем букы на Правильные Буквы (тм)
  for rus_let in DICT_UTF:
    pseudo_url=pseudo_url.replace(rus_let, DICT_UTF[rus_let])

  return pseudo_url





"""
ПОИСК СИНОНИМОВ РЕГУЛЯРКОЙ И СОЗДАНИЕ ИХ СПИСКА
"""
def find_and_format(URL):
  # записываем в code хтмл-код страницы
  r = requests.get(URL)
  code = r.text

  # на случай если синонимов нет на сайте
  ERROR = "Страница не найдена"

  if ERROR in code:
    # если нет синнимов, то и список синонимов пустой
    synList = []
  else:
    synList = re.findall(r'<li class="col-sm-4 col-xs-6"><span>.+?</span></li>', code)

    # убираем у каждого эл-та списка части с хтмл и оставляем только сами синонимы
    i = 0
    for i in range(len(synList)):
     synList[i] = synList[i].replace('<li class="col-sm-4 col-xs-6"><span>', '')
     synList[i] = synList[i].replace('</span></li>', '')
  return synList




"""
ПИШЕМ ТОЛЬКО <=10 ШТУК
"""
def limit(synList, URL):
  # если синонимов нет
  if len(synList) == 0:
    syns = ""
    com = "Синонимов данного слова нет в базе данных."
  # если синонимов меньше или равно 10 штук то пишем все...
  elif len(synList)>0 and len(synList)<=10:
    # превращаем список в текст
    syns = "\n".join(synList)
    com = "Повезло! У слова не так много синонимов, и все поместились в одно сообщение.\n\n"
  # ...но если их больше, то пишем первые 10 и отправляем юзера на сайт
  else:
    syns = synList[0]
    for i in range(1,10):
      syns = syns + "\n" + synList[i]
    com = "У слова слишком много синонимов. Ниже представлены 10 возможных вариантов, остальные доступны по ссылке:\n"+URL+"\n\n"

  return syns, com




"""
СЛОВАРЬ СИНОНИМОВ
(ОСНОВНАЯ ЧАСТЬ)
"""
def DICTIONARY(word):
  # создаем ссылку с кириллицей
  pseudo_url = create_pseudo_url(word)
  # кодируем ссыль по утф (?)
  URL = utf_decode(pseudo_url)
  # находим синонимы в коде страницы
  synList = find_and_format(URL)
  # выписываем 10 штук максимум
  syns, com = limit(synList, URL)

  return(syns, com)





"""
УБРАТЬ ПРОБЕЛЫ КОГДА ЗАМЕНЯЕМ ПАРАЗИТЫ
"""
def space_del(text):
  # убираем дохренулище пробелов, оставляем один красивенький
  text = re.sub(r"\s+", " ", text)

  # убираем пробелы в начале и конце строки
  if text.startswith(" "):
    text = "" + text[1:]
  if text.endswith(" "):
    text = text[:-1] + ""

  # убираем одинарные пробелы перед знаками препинания + после
  text = text.replace(" .", ".")
  text = text.replace(" ,", ",")
  text = text.replace(" !", "!")
  text = text.replace(" ?", "?")
  text = text.replace(" :", ":")
  text = text.replace(" ;", ";")
  text = text.replace(" )", ")")
  text = text.replace("( ", "(")
  text = text.replace(" »", "»")
  text = text.replace("« ", "«")

  return text





"""
СОЗДАЕМ СПИСОК СЛОВ ТЕКСТА
ЧТОБЫ ЗНАКИ ПРЕПИНАНИЯ СЧИТАЛИСЬ ЗА СЛОВА
"""
# тире нет тк оно и так отделено пробелами с обеих сторон
def list_making(text):
  text = text.replace(".", " .")
  text = text.replace(",", " ,")
  text = text.replace("!", " !")
  text = text.replace("?", " ?")
  text = text.replace(":", " :")
  text = text.replace(";", " ;")
  text = text.replace("(", "( ")
  text = text.replace(")", " )")
  text = text.replace("«", "« ")
  text = text.replace("»", " »")
  text = re.sub(r'\"(.+?)\"', r'« \1 »', text)
  wordList = text.split()
  
  return wordList
  





"""
СЛОВАРЬ ПАРАЗИТОВ
"""
def parasyte(text):
  DICT_PAR = {
    "блин": "",
    "блинский": "",
    "буквально": "на самом деле",
    "без базара": "само собой",
    "без б": "само собой",
    "видишь ли": "",
    "вот": "",
    "воть": "",
    "в курсах": ["ознакомлен","знаю",],
    "в курсе": ["ознакомлен","знаю",],
    "вкурсе": ["ознакомлен","знаю",],
    "в натуре": ["в самом деле", "правда", "так и есть",],
    "внатуре": ["в самом деле", "правда", "так и есть",],
    "в некотором роде": "",
    "в общем": ["в итоге", "в общей сложности",],
    "вобщем": ["в итоге", "в общей сложности",],
    "вообщем": ["в итоге", "в общей сложности",],
    "в общем-то": ["в целом", "заключая",],
    "вобщем-то": ["в целом", "заключая",],
    "вообщем-то": ["в целом", "заключая",],
    "в принципе": ["согласен, за исключением", "считаю верным, но",],
    "впринципе": ["согласен, за исключением", "считаю верным, но",],
    "в смысле": ["что ты имеешь в виду", "это означает", "имеется в виду",],
    "всмысле": ["что ты имеешь в виду", "это означает", "имеется в виду",],
    "всм": ["что ты имеешь в виду", "это означает", "имеется в виду",],
    "вообще": "",
    "вобще": "",
    "и все такое": "и так далее",
    "и всё такое": "и так далее",
    "в целом": ["в итоге", "в общей сложности",],
    "вцелом": ["в итоге", "в общей сложности",],
    "да ну": ["не может быть", "удивительно",],
    "допустим": "предположим",
    "достаточно": "вполне",
    "зашквар": "глупость",
    "значит": "",
    "как-то так": "приблизительно",
    "как бы": "",
    "ну как сказать": "",
    "кароч": ["в двух словах", "если кратко, то",],
    "кароче": ["в двух словах", "если кратко, то",],
    "кек": ["смешно", "забавно",],
    "кстати": "",
    "кста": "",
    "кст": "",
    "конкретно": "сильно",
    "короче": ["в двух словах", "если кратко, то",],
    "короч": ["в двух словах", "если кратко, то",],
    "лол": ["смешно", "забавно",],
    "на фиг": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нафиг": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нафига": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нифига себе": ["невероятно", "удивительно",],
    "нифига се": ["невероятно", "удивительно",],
    "нифигасе": ["невероятно", "удивительно",],
    "на хрен": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нахрен": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нахрена": ["не нужно", "нет необходимости в этом", "обойдемся без этого",],
    "нихрена себе": ["невероятно", "удивительно",],
    "нихрена се": ["невероятно", "удивительно",],
    "нихренасе": ["невероятно", "удивительно",],
    "нах": "зачем",
    "ничего себе": ["невероятно", "удивительно",],
    "ниче се": ["невероятно", "удивительно",],
    "ничесе": ["невероятно", "удивительно",],
    "ничё се": ["невероятно", "удивительно",],
    "ничёсе": ["невероятно", "удивительно",],
    "не вопрос": "меня не затруднит",
    "нефига себе": ["невероятно", "удивительно",],
    "нефига се": ["невероятно", "удивительно",],
    "нефигасе": ["невероятно", "удивительно",],
    "нехрена себе": ["невероятно", "удивительно",],
    "нехрена се": ["невероятно", "удивительно",],
    "нехренасе": ["невероятно", "удивительно",],
    "ну": "",
    "ну это": "",
    "ну вот": "",
    "ну воть": "",
    "по любому": "в любом случае",
    "по-любому": "в любом случае",
    "по любасу": "в любом случае",
    "походу": "похоже на то, что",
    "пофиг": "неважно",
    "пофигу": "неважно",
    "пипец": "ужас",
    "прикол": ["очень классно", "круто",],
    "прикинь": "",
    "просто": "",
    "прост": "",
    "прямо": "как раз",
    "реально": ["правда", "на самом деле",],
    "слушай": "",
    "собственно говоря": "",
    "скажем": "",
    "так сказать": "",
    "типа": "наподобие",
    "типо": "наподобие",
    "типа того": ["очень похоже на", "согласен",],
    "тобишь": "",
    "то бишь": "",
    "только": "",
    "то есть": "иными словами",
    "угар": ["смешно", "забавно",],
    "фак": ["ужасно", "плохо",],
    "фигня": "бессмыслица",
    "че за": "что происходит",
    "чё за": "что происходит",
    "хз": "не знаю",
    "збс": "круто"
  }

  comment = ""
  parasList = []                                              # собирает все найденные паразиты
  fixList = []                                                # собирает только те паразиты, которые надо заменить
  deleteList = []                                             # собирает только те паразиты, которые были удалены
  new_wordList = []                                           # запасной список слов текста


  text = text.lower()
  
  # если паразит = 2 слова
  for parasyte in DICT_PAR:
    if " " in parasyte:
      # если паразит есть в тексте...
      if parasyte in text:
        parasList.append(parasyte)
        # и если паразит ни на что не заменяется...
        if DICT_PAR[parasyte] == "":
          # то мы его удаляем из текста
          text = text.replace(parasyte, "")
          deleteList.append(parasyte)
        # но если заменяется...
        else:
          # то выделяем в тексте капсом...
          caps = parasyte.upper()
          text = text.replace(parasyte, caps)
          # и записываем паразит в отдельный список
          fixList.append(parasyte)

  # делаем список слов с измененными двойными паразитами
  wordList = list_making(text)
  new_wordList = wordList
  
  # если паразит = 1 слово
  for word in range(len(new_wordList)):
    for parasyte in DICT_PAR:
      # если слово является паразитом...
      if new_wordList[word] == parasyte:
        # записываем его в список всех паразитов
        parasList.append(parasyte)
        # если не заменяется, то удаляем и записываем в список удаленных
        if DICT_PAR[parasyte] == "":
          wordList[word] = ""
          deleteList.append(parasyte)
        # если заменяется, то выделяем капсом и записываем в список для фикса
        else:
          wordList[word] = wordList[word].upper()
          fixList.append(parasyte)
          


  # если паразитов нет
  if len(parasList) == 0:
    text = None
    comment = "В твоем тексте всё (относительно) прекрасно :)"

  # если паразиты есть
  else:
    # соединяем список слов в текст
    text = " ".join(wordList)
    # если есть удаленные, то выписываем их
    if len(deleteList) != 0:
      comment = "Из твоего текста я удалил следующие паразиты:"
      for i in range(len(deleteList)):
        comment = comment + "\n• " + deleteList[i]

    # если есть те которые надо заменить, то выписываем их синонимы
    if len(fixList) != 0:
      # если еще есть удаленные паразиты, то мы их выписали до этого, и нужно отделить две секции
      if len(deleteList) != 0:
        comment = comment + "\n\n"
      comment = comment + "В твоем тексте нужно провести следующие замены:"
      # перебираем паразиты которые надо заменить...
      for m in range(len(fixList)):
        # сам паразит
        key = fixList[m]
        # синоним(ы) паразита из словаря
        value = DICT_PAR[fixList[m]]
        # если синонимов несколько, то придется их все вписать через запятую в одну переменную
        if type(value) == list:
          valueList = value
          value = valueList[0]
          for k in range(1,len(valueList)):
            value = value + ", " + valueList[k]

        comment = comment + "\n• " + key + " => " + value

  # убираем лишние пробелы
  if text != None:
    text = space_del(text)

  return text, comment





"""
КОМАНДА СТАРТ
"""
@bot.message_handler(commands=["start"])
def send_welcome(message):
  bot.send_message(message.chat.id, "Привет, я бот-чистописец. У меня есть две способности:\n\n( 1 ) Отправь мне сообщение вида «/fixtext текст» и я его почищу: уберу слова-паразиты и обозначу неявные формы.\n\n( 2 ) Отправь мне сообщение вида «/syndict слово» и я выдам тебе 10 синонимов этого слова с сайта synonymonline.ru.\n\nЧтобы просмотреть список возможных команд, введи /help.")


"""
КОМАНДА ХЕЛП
"""
@bot.message_handler(commands=["help"])
def commands_list(message):
  bot.send_message(message.chat.id, "/start -- приветствие :)\n\n/help -- список команд\n\n/fixtext -- удаление и/или замена слов-паразитов: напиши текст после команды (напр. /fixtext и сказал я 'Ну блин как так'), и я его почищу\n\n/syndict -- словарь синонимов: напиши слово после команды (напр. /syndict трава) и я отправлю тебе его синонимы")





"""
КОМАНДА ПАРАЗИТЫ
"""
@bot.message_handler(commands=["fixtext"])
def dict_paras(message):
  if message.text == "/fixtext":
    bot.send_message(message.chat.id, "Пожалуйста, введи текст после команды /fixtext! Мне нечего чистить.")
  else:
    # отчленяем текст (к сожалению если чел еще раз упомянул /fixtext то он тоже удалится, потом исправлю)
    text = message.text.replace("/fixtext ","")
    newtext, comment = parasyte(text)
    if newtext == None:
       bot.send_message(message.chat.id, comment)
    else:
      reply = "Новый текст выглядит так:\n„‎" + newtext + "“\n\n" + comment
      bot.send_message(message.chat.id, reply)





"""
КОМАНДА СЛОВАРЬ
"""

@bot.message_handler(commands=["syndict"])
def dict_syn(message):
  # регулярка чтобы находить не-кириллицу в словах
  regex = "[^А-ЯЁа-яё]"
  # word это то что чел написал после команды
  word = message.text.replace("/syndict ","")
  match = re.search(regex, word)
  # нашел...
  if match:
    bot.send_message(message.chat.id, "Пожалуйста, напиши после команды слово на кириллице без знаков препинания, латиницы и прочего добра!")
  # не нашел (и слава богу)...
  else:
    synonyms, comment = DICTIONARY(word)
    reply = comment + synonyms
    bot.send_message(message.chat.id, reply)




"""
РЕАКЦИЯ НА ОБЫЧНЫЕ СООБЩЕНИЯ
"""
@bot.message_handler(content_types=["text", "audio", "document", "photo", "sticker", "video", "video_note", "voice", "location", "contact"])
def plsstoptypingnonsense(message):
  bot.send_message(message.chat.id, "Я не умею общаться, думать или чувствовать. Пожалуйста, воспользуйся командами.")






bot.polling(timeout=60)
